AWSTemplateFormatVersion: '2010-09-09'
Description: template to create EC2 , waitCondition, WaitConditionHandle , then will call the waitConditionhandler to declare its creation success
Parameters:
  MyKey:
    Description: Select KeyPair
    Type: AWS::EC2::KeyPair::KeyName
  MyImageId:
    Description: Image ID - (ami-d834aba1) is valid only for eu-west-1,
    Type: String
    Default: ami-d834aba1

Resources:
  Ec2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: create json file and send to signed URL of condition handler
      AWS::CloudFormation::Init:
        config:

          files:
           "/tmp/a":
             content: |
                 {
                  "Status" : "SUCCESS",
                  "Reason" : "Configuration Complete",
                  "UniqueId" : "ID1234",
                  "Data" : "Application has completed configuration."
                  }
             mode: '000644'
             owner: root
             group: root
           "/tmp/callhandler.sh":
              content:
                !Sub |
                   #!/bin/bash -xe
                   curl -T /tmp/a '${myWaitHandle}'
              mode: '000744'
              owner: root
              group: root
    Properties:
      UserData:
        Fn::Base64:
          !Sub |
              #!/bin/bash -xe
              /opt/aws/bin/cfn-init -s ${AWS::StackId} -r Ec2Instance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
              /tmp/callhandler.sh

      KeyName: !Ref MyKey
      InstanceType: t2.micro
      ImageId: !Ref MyImageId
  myWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
    Properties: {}
  myWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: Ec2Instance
    Properties:
      Handle: !Ref myWaitHandle
      Timeout: '4500'
Outputs:
  ApplicationData:
    Value: !GetAtt myWaitCondition.Data
    Description: The data passed back as part of signalling the WaitCondition.
