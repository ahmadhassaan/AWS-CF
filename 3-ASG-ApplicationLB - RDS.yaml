  # ASG with classical load balancers,with rolling update policy applied
Mappings:
  # The latest Amazon Linux AMI 2017.09.1 was released on 2017-11-22.
  # https://aws.amazon.com/amazon-linux-ami/
  AWSInstanceType2Arch:
    t1.micro:
      Arch: PV64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    m1.small:
      Arch: PV64
    m1.medium:
      Arch: PV64
    m1.large:
      Arch: PV64
    m1.xlarge:
      Arch: PV64
    m2.xlarge:
      Arch: PV64
    m2.2xlarge:
      Arch: PV64
    m2.4xlarge:
      Arch: PV64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    c1.medium:
      Arch: PV64
    c1.xlarge:
      Arch: PV64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    us-east-1: ## N.Virginia
      PV64: ami-2a69aa47
      HVM64: ami-55ef662f
      HVMG2: ami-3353c649
    us-east-2: ## Ohio
      PV64: NOT_SUPPORTED
      HVM64: ami-15e9c770
      HVMG2: NOT_SUPPORTED
    us-west-1: ## N.California
      PV64: ami-a2490dc2
      HVM64: ami-a51f27c5
      HVMG2: ami-62ad9502
    us-west-2: ## Oregon
      PV64: ami-7f77b31f
      HVM64: ami-bf4193c7
      HVMG2: ami-58ce1220
    ca-central-1: ## Canada
      PV64: NOT_SUPPORTED
      HVM64: ami-d29e25b6
      HVMG2: NOT_SUPPORTED
    sa-east-1: ## Sau Paolo
      PV64: ami-1ad34676
      HVM64: ami-286f2a44
      HVMG2: NOT_SUPPORTED
    eu-west-1:  ## Ireland
      PV64: ami-4cdd453f
      HVM64: ami-1a962263
      HVMG2: ami-41bc0a38
    eu-west-2: ## London
      PV64: NOT_SUPPORTED
      HVM64: ami-e7d6c983
      HVMG2: NOT_SUPPORTED
    eu-west-3: ##  Paris
      PV64: NOT_SUPPORTED
      HVM64: ami-8715a2fa
      HVMG2: NOT_SUPPORTED
    eu-central-1: ## Frankfurt
      PV64: ami-6527cf0a
      HVM64: ami-bf2ba8d0
      HVMG2: ami-b50d8fda
    ap-northeast-1: ## Tokyo
      PV64: ami-3e42b65f
      HVM64: ami-da9e2cbc
      HVMG2: ami-14e45872
    ap-northeast-2: ## Seoul
      PV64: NOT_SUPPORTED
      HVM64: ami-1196317f
      HVMG2: NOT_SUPPORTED
    ap-southeast-1: ## Singapore
      PV64: ami-df9e4cbc
      HVM64: ami-c63d6aa5
      HVMG2: ami-2a80d649
    ap-southeast-2: ## Sydney
      PV64: ami-63351d00
      HVM64: ami-ff4ea59d
      HVMG2: ami-02c42e60
    ap-south-1: ## Mumbai
      PV64: NOT_SUPPORTED
      HVM64: ami-d5c18eba
      HVMG2: ami-f6165899

Parameters:
  MyDBName:
    Type: String
    Default: drizzle
  MyDBUserName:
    Type: String
    Default: admin
  MyDBEndpoint:
    Type: String
    Default:  rm1fhnujllb7oax.coseyvlobksb.us-east-1.rds.amazonaws.com
  MyDBPassword:
    Type: String
    Default: password
    NoEcho: true
    Description: The DB admin account password
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
  BastionKey:
    Type: AWS::EC2::KeyPair::KeyName
  PrivateInstanceKey:
    Type: AWS::EC2::KeyPair::KeyName
  InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t1.micro
      - t2.micro
      - t2.small
      - t2.medium
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
  ASGPHPDesired:
    Description: AutoScaling Group Desired Number of Instances
    Type: Number
    Default: 2
    MinValue: 1
  ASGPHPMin:
    Description: "AutoScaling Group Minimum Number of instances"
    Type: Number
    Default: 1
    MinValue: 1
  ASGPHPMax:
    Description: "AutoScaling Group Maximum Number of instances"
    Type: Number
    Default: 4
    MinValue: 1



Resources:
  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access to the bastion host from the Internet via port 22
      VpcId:  !ImportValue VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
  ALBWebSecurityGroup:
       Type: AWS::EC2::SecurityGroup
       Properties:
         GroupDescription: Enable HTTP
         VpcId:  !ImportValue VPC
         SecurityGroupIngress:
         - CidrIp: 0.0.0.0/0
           FromPort: 80
           ToPort: 80
           IpProtocol: tcp
  InstanceWebSecurityGroup:
       Type: AWS::EC2::SecurityGroup
       Properties:
         GroupDescription: Enable HTTP
         VpcId:  !ImportValue VPC
         SecurityGroupIngress:
         - SourceSecurityGroupId: !Ref ALBWebSecurityGroup
           FromPort: 80
           ToPort: 80
           IpProtocol: tcp
  InstanceSSHSecurityGroup:
       Type: AWS::EC2::SecurityGroup
       Properties:
         GroupDescription: Enable SSH access via Bastion Host
         VpcId:  !ImportValue VPC
         SecurityGroupIngress:
         - SourceSecurityGroupId: !Ref BastionHostSecurityGroup
           FromPort: 22
           ToPort: 22
           IpProtocol: tcp

  ALBPHP:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
        - !ImportValue PublicSubnet1
        - !ImportValue PublicSubnet2
      SecurityGroups:
        - !Ref ALBWebSecurityGroup
      Tags:
        - Key: Name
          Value: ALBPHP
  ALBPHPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:  !Ref ALBPHP
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBPHPTargetGroup

  ALBPHPTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      UnhealthyThresholdCount: 10
      HealthCheckPath: /test.html
      Name: MyTargetGroup
      Port: 80
      Protocol: HTTP
      VpcId: !ImportValue VPC

  ASGPHP:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier:
        - !ImportValue PrivateSubnet1
        - !ImportValue PrivateSubnet2
      LaunchConfigurationName: !Ref ASGPHPLaunchConfiguration
      DesiredCapacity: !Ref ASGPHPDesired
      MaxSize: !Ref ASGPHPMax
      MinSize: !Ref ASGPHPMin
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref ALBPHPTargetGroup
      Tags:
        - Key: ASGPHP
          Value: ASG-PHP
          PropagateAtLaunch: false
        - Key: Name
          Value: ASG-PHP-Instance
          PropagateAtLaunch: true
  ASGPHPLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      InstanceType: !Ref InstanceType
      ImageId:
        Fn::FindInMap:
        - "AWSRegionArch2AMI"
        - Ref: "AWS::Region"
        - Fn::FindInMap:
            - "AWSInstanceType2Arch"
            - Ref: "InstanceType"
            - "Arch"
      InstanceMonitoring:  false
      SecurityGroups:
        -   !Ref InstanceWebSecurityGroup
        -   !Ref InstanceSSHSecurityGroup
      KeyName: !Ref PrivateInstanceKey
      UserData:
        Fn::Base64:
         !Sub |
              #!/bin/bash
              yum install -y httpd24 php56 php56-mysqlnd
              yum update -y
              service httpd start
              chkconfig httpd on
              groupadd www
              cd /var/www
              mkdir inc
              cd inc
              touch dbinfo.inc
              cat  << 'EOF' >>dbinfo.inc

              <?php

              define('DB_SERVER', '${MyDBEndpoint}');
              define('DB_USERNAME', '${MyDBUserName}');
              define('DB_PASSWORD', '${MyDBPassword}');
              define('DB_DATABASE', '${MyDBName}');

              ?>
              EOF
              cd /var/www/html
              touch index.php
              cat  << 'EOF' >>index.php
              <?php include "../inc/dbinfo.inc"; ?>
              <html>
              <body>
              <h1>Sample page</h1>
              <?php

                /* Connect to MySQL and select the database. */
                $connection = mysqli_connect(DB_SERVER, DB_USERNAME, DB_PASSWORD);

                if (mysqli_connect_errno()) echo "Failed to connect to MySQL: " . mysqli_connect_error();

                $database = mysqli_select_db($connection, DB_DATABASE);

                /* Ensure that the Employees table exists. */
                VerifyEmployeesTable($connection, DB_DATABASE);

                /* If input fields are populated, add a row to the Employees table. */
                $employee_name = htmlentities($_POST['Name']);
                $employee_address = htmlentities($_POST['Address']);

                if (strlen($employee_name) || strlen($employee_address)) {
                  AddEmployee($connection, $employee_name, $employee_address);
                }
              ?>

              <!-- Input form -->
              <form action="<?PHP echo $_SERVER['SCRIPT_NAME'] ?>" method="POST">
                <table border="0">
                  <tr>
                    <td>Name</td>
                    <td>Address</td>
                  </tr>
                  <tr>
                    <td>
                      <input type="text" name="Name" maxlength="45" size="30" />
                    </td>
                    <td>
                      <input type="text" name="Address" maxlength="90" size="60" />
                    </td>
                    <td>
                      <input type="submit" value="Add Data" />
                    </td>
                  </tr>
                </table>
              </form>

              <!-- Display table data. -->
              <table border="1" cellpadding="2" cellspacing="2">
                <tr>
                  <td>ID</td>
                  <td>Name</td>
                  <td>Address</td>
                </tr>

              <?php

              $result = mysqli_query($connection, "SELECT * FROM Employees");

              while($query_data = mysqli_fetch_row($result)) {
                echo "<tr>";
                echo "<td>",$query_data[0], "</td>",
                     "<td>",$query_data[1], "</td>",
                     "<td>",$query_data[2], "</td>";
                echo "</tr>";
              }
              ?>

              </table>

              <!-- Clean up. -->
              <?php

                mysqli_free_result($result);
                mysqli_close($connection);

              ?>

              </body>
              </html>


              <?php

              /* Add an employee to the table. */
              function AddEmployee($connection, $name, $address) {
                 $n = mysqli_real_escape_string($connection, $name);
                 $a = mysqli_real_escape_string($connection, $address);

                 $query = "INSERT INTO `Employees` (`Name`, `Address`) VALUES ('$n', '$a');";

                 if(!mysqli_query($connection, $query)) echo("<p>Error adding employee data.</p>");
              }

              /* Check whether the table exists and, if not, create it. */
              function VerifyEmployeesTable($connection, $dbName) {
                if(!TableExists("Employees", $connection, $dbName))
                {
                   $query = "CREATE TABLE `Employees` (
                       `ID` int(11) NOT NULL AUTO_INCREMENT,
                       `Name` varchar(45) DEFAULT NULL,
                       `Address` varchar(90) DEFAULT NULL,
                       PRIMARY KEY (`ID`),
                       UNIQUE KEY `ID_UNIQUE` (`ID`)
                     ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=latin1";

                   if(!mysqli_query($connection, $query)) echo("<p>Error creating table.</p>");
                }
              }

              /* Check for the existence of a table. */
              function TableExists($tableName, $connection, $dbName) {
                $t = mysqli_real_escape_string($connection, $tableName);
                $d = mysqli_real_escape_string($connection, $dbName);

                $checktable = mysqli_query($connection,
                    "SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_NAME = '$t' AND TABLE_SCHEMA = '$d'");

                if(mysqli_num_rows($checktable) > 0) return true;

                return false;
              }
              ?>

              EOF

              usermod -a -G www ec2-user
              chown -R root:www /var/www
              chmod 2775 /var/www
              find /var/www -type d -exec  chmod 2775 {} +
              find /var/www -type f -exec  chmod 0664 {} +
              echo "I am Alive" > /var/www/html/test.html
              /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource MyAutoScaling --region ${AWS::Region}
  BastionHostInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      KeyName: !Ref BastionKey
      SubnetId: !ImportValue PublicSubnet1
      SecurityGroupIds:
      - !Ref BastionHostSecurityGroup
      ImageId:
        Fn::FindInMap:
        - "AWSRegionArch2AMI"
        - Ref: "AWS::Region"
        - Fn::FindInMap:
            - "AWSInstanceType2Arch"
            - Ref: "InstanceType"
            - "Arch"
      Tags:
      - Key: Name
        Value: Bastion Host
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Instance Type/Image and Keys"
        Parameters:
          - InstanceType
          - BastionKey
          - PrivateInstanceKey
      - Label:
          default: "Auto SCaling Group"
        Parameters:
          - ASGPHPDesired
          - ASGPHPMin
          - ASGPHPMax
Outputs:
  ALBDNS:
    Description: ALB URL
    Value: !GetAtt ALBPHP.DNSName
  BastionHostIP:
    Description: Bastion Public IP
    Value: !GetAtt BastionHostInstance.PublicIp
